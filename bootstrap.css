

  
   
    .container-fluid {
      @extend %container-flex-properties;
    }
    $breakpoint, $container-max-width in $container-max-widths {
      > .container#{breakpoint-infix($breakpoint, $container-max-widths)} {
        @extend %container-flex-properties;
      }
    }
  }

  
  .navbar-brand {
    padding-top: $navbar-brand-padding-y;
    padding-bottom: $navbar-brand-padding-y;
    margin-right: $navbar-brand-margin-end;
     font-size($navbar-brand-font-size);
    text-decoration: if($link-decoration == none, null, none);
    white-space: nowrap;

    &:hover,
    &:focus {
      text-decoration: if($link-hover-decoration == underline, none, null);
    }
  }
  
  .navbar-nav {
    display: flex;
    flex-direction: column; 
    padding-left: 0;
    margin-bottom: 0;
    list-style: none;
  
    .nav-link {
      padding-right: 0;
      padding-left: 0;
    }
  
    .dropdown-menu {
      position: static;
    }
  }
  
  
  
  .navbar-text {
    padding-top: $nav-link-padding-y;
    padding-bottom: $nav-link-padding-y;
  }
  .navbar-toggler {
    padding: $navbar-toggler-padding-y $navbar-toggler-padding-x;
     font-size($navbar-toggler-font-size);
    line-height: 1;
    background-color: transparent; // remove default button style
    border: $border-width solid transparent; // remove default button style
     border-radius($navbar-toggler-border-radius);
     transition($navbar-toggler-transition);
  
    &:hover {
      text-decoration: none;
    }
  
    &:focus {
      text-decoration: none;
      outline: 0;
      box-shadow: 0 0 0 $navbar-toggler-focus-width;
    }
  }
  
  // Keep as a separate element so folks can easily override it with another icon
  // or image file as needed.
  .navbar-toggler-icon {
    display: inline-block;
    width: 1.5em;
    height: 1.5em;
    vertical-align: middle;
    background-repeat: no-repeat;
    background-position: center;
    background-size: 100%;
  }
  
  .navbar-nav-scroll {
    max-height: var(--#{$variable-prefix}scroll-height, 75vh);
    overflow-y: auto;
  }
  
  // scss-docs-start navbar-expand-loop
  // Generate series of `.navbar-expand-*` responsive classes for configuring
  // where your navbar collapses.
  .navbar-expand {
    @each $breakpoint in map-keys($grid-breakpoints) {
      $next: breakpoint-next($breakpoint, $grid-breakpoints);
      $infix: breakpoint-infix($next, $grid-breakpoints);
  
      // stylelint-disable-next-line scss/selector-no-union-class-name
      &#{$infix} {
        @include media-breakpoint-up($next) {
          flex-wrap: nowrap;
          justify-content: flex-start;
  
          .navbar-nav {
            flex-direction: row;
  
            .dropdown-menu {
              position: absolute;
            }
  
            .nav-link {
              padding-right: $navbar-nav-link-padding-x;
              padding-left: $navbar-nav-link-padding-x;
            }
          }
  
          .navbar-nav-scroll {
            overflow: visible;
          }
  
          .navbar-collapse {
            display: flex !important; 
            flex-basis: auto;
          }
  
          .navbar-toggler {
            display: none;
          }
        }
      }
    }
  }

  .navbar-light {
    .navbar-brand {
      color: $navbar-light-brand-color;
  
      &:hover,
      &:focus {
        color: $navbar-light-brand-hover-color;
      }
    }
  
    .navbar-nav {
      .nav-link {
        color: $navbar-light-color;
  
        &:hover,
        &:focus {
          color: $navbar-light-hover-color;
        }
  
        &.disabled {
          color: $navbar-light-disabled-color;
        }
      }
  
      .show > .nav-link,
      .nav-link.active {
        color: $navbar-light-active-color;
      }
    }
  
    .navbar-toggler {
      color: $navbar-light-color;
      border-color: $navbar-light-toggler-border-color;
    }
  
    .navbar-toggler-icon {
      background-image: escape-svg($navbar-light-toggler-icon-bg);
    }
  
    .navbar-text {
      color: $navbar-light-color;
  
      a,
      a:hover,
      a:focus  {
        color: $navbar-light-active-color;
      }
    }
  }
  
  // White links against a dark background
  .navbar-dark {
    .navbar-brand {
      color: $navbar-dark-brand-color;
  
      &:hover,
      &:focus {
        color: $navbar-dark-brand-hover-color;
      }
    }
  
    .navbar-nav {
      .nav-link {
        color: $navbar-dark-color;
  
        &:hover,
        &:focus {
          color: $navbar-dark-hover-color;
        }
  
        &.disabled {
          color: $navbar-dark-disabled-color;
        }
      }
  
      .show > .nav-link,
      .nav-link.active {
        color: $navbar-dark-active-color;
      }
    }
  
    .navbar-toggler {
      color: $navbar-dark-color;
      border-color: $navbar-dark-toggler-border-color;
    }
  
    .navbar-toggler-icon {
      background-image: escape-svg($navbar-dark-toggler-icon-bg);
    }
  
    .navbar-text {
      color: $navbar-dark-color;
      a,
      a:hover,
      a:focus {
        color: $navbar-dark-active-color;
      }
    }
  }
  .card {
    position: relative;
    display: flex;
    flex-direction: column;
    min-width: 0; 
    height: $card-height;
    word-wrap: break-word;
    background-color: $card-bg;
    background-clip: border-box;
    border: $card-border-width solid $card-border-color;
    @include border-radius($card-border-radius);
  
    > hr {
      margin-right: 0;
      margin-left: 0;
    }
  
    > .list-group {
      border-top: inherit;
      border-bottom: inherit;
  
      &:first-child {
        border-top-width: 0;
        @include border-top-radius($card-inner-border-radius);
      }
  
      &:last-child  {
        border-bottom-width: 0;
        @include border-bottom-radius($card-inner-border-radius);
      }
    }
  
    // Due to specificity of the above selector (`.card > .list-group`), we must
    // use a child selector here to prevent double borders.
    > .card-header + .list-group,
    > .list-group + .card-footer {
      border-top: 0;
    }
  }
  
  .card-body {
    // Enable `flex-grow: 1` for decks and groups so that card blocks take up
    // as much space as possible, ensuring footers are aligned to the bottom.
    flex: 1 1 auto;
    padding: $card-spacer-y $card-spacer-x;
    color: $card-color;
  }
  
  .card-title {
    margin-bottom: $card-title-spacer-y;
  }
  
  .card-subtitle {
    margin-top: -$card-title-spacer-y * .5;
    margin-bottom: 0;
  }
  
  .card-text:last-child {
    margin-bottom: 0;
  }
  
  .card-link {
    &:hover {
      text-decoration: none;
    }
  
    + .card-link {
      margin-left: $card-spacer-x;
    }
  }
  
  //
  // Optional textual caps
  //
  
  .card-header {
    padding: $card-cap-padding-y $card-cap-padding-x;
    margin-bottom: 0; // Removes the default margin-bottom of <hN>
    color: $card-cap-color;
    background-color: $card-cap-bg;
    border-bottom: $card-border-width solid $card-border-color;
  
    &:first-child {
      @include border-radius($card-inner-border-radius $card-inner-border-radius 0 0);
    }
  }
  

  .card-header-tabs {
    margin-right: -$card-cap-padding-x * .5;
    margin-bottom: -$card-cap-padding-y;
    margin-left: -$card-cap-padding-x * .5;
    border-bottom: 0;
  
    @if $nav-tabs-link-active-bg != $card-bg {
      .nav-link.active {
        background-color: $card-bg;
        border-bottom-color: $card-bg;
      }
    }
  }
  
  .card-header-pills {
    margin-right: -$card-cap-padding-x * .5;
    margin-left: -$card-cap-padding-x * .5;
  }
  
  // Card image
  .card-img-overlay {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    padding: $card-img-overlay-padding;
    @include border-radius($card-inner-border-radius);
  }
  
  .card-img,
  .card-img-top,
  .card-img-bottom {
    width: 400; // Required because we use flexbox and this inherently applies align-self: stretch
  }
  
  .card-img,
  .card-img-top {
    @include border-top-radius($card-inner-border-radius);
  }
  
  .card-img,
  .card-img-bottom {
    @include border-bottom-radius($card-inner-border-radius);
  }
  
  
  //
  // Card groups
  //
  
  .card-group {
    // The child selector allows nested `.card` within `.card-group`
    // to display properly.
    > .card {
      margin-bottom: $card-group-margin;
    }
  
    @include media-breakpoint-up(sm) {
      display: flex;
      flex-flow: row wrap;
      // The child selector allows nested `.card` within `.card-group`
      // to display properly.
      > .card {
        // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
        flex: 1 0 0%;
        margin-bottom: 0;
  
        + .card {
          margin-left: 0;
          border-left: 0;
        }
  
        // Handle rounded corners
        @if $enable-rounded {
          &:not(:last-child) {
            @include border-end-radius(0);
  
            .card-img-top,
            .card-header {
              // stylelint-disable-next-line property-disallowed-list
              border-top-right-radius: 0;
            }
            .card-img-bottom,
            .card-footer {
              // stylelint-disable-next-line property-disallowed-list
              border-bottom-right-radius: 0;
            }
          }
  
          &:not(:first-child) {
            @include border-start-radius(0);
  
            .card-img-top,
            .card-header {
              // stylelint-disable-next-line property-disallowed-list
              border-top-left-radius: 0;
            }
            .card-img-bottom,
            .card-footer {
              // stylelint-disable-next-line property-disallowed-list
              border-bottom-left-radius: 0;
            }
          }
        }
      }
    }
  }
  